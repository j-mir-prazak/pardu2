'use strict';

// ----- Requires ----- //

let spawn = require('child_process').spawn;
let EventEmitter = require('events');
var StringDecoder = require('string_decoder').StringDecoder


// ----- Setup ----- //

// The permitted audio outputs, local means via the 3.5mm jack.
let ALLOWED_OUTPUTS = ['hdmi', 'local', 'both', 'alsa'];


// ----- Functions ----- //

// Creates an array of arguments to pass to omxplayer.
function buildArgs (source, volume) {


	let args = [source];
	console.log(volume)
	if ( volume ) args.push("-volume", volume)
	args.push("-ao", "alsa")

	return args;

}


// ----- Omx Class ----- //

function Omx (source, volume) {

	// ----- Local Vars ----- //

	let omxplayer = new EventEmitter();
	let player = null;
	let open = false;
  	omxplayer["open"] = open;
	omxplayer["pid"] = false

	// ----- Local Functions ----- //

	// Marks player as closed.
	function updateStatus () {

		open = false;
		omxplayer["open"] = open;
		omxplayer.emit('close');

	}

	// Emits an error event, with a given message.
	function emitError (message) {

		open = false;
		omxplayer["open"] = open;
		omxplayer.emit('error', message);

	}

	function emitPlaying () {

		open = true;
		omxplayer["open"] = open;
		omxplayer.emit('playback');

	}

	// Spawns the omxplayer process.
	function spawnPlayer (src, volume) {

		let build_args = buildArgs(src, volume);

		let stdbuf_args = new Array(
			'-i0', '-o0', '-e0',
			'/usr/bin/mplayer', '-novideo'
		)

		//pipe cleanup
		let pipe_args = new Array(
				"|", "tr", "\r", "\n"
		)

		let args = stdbuf_args.concat(build_args)
		args = args.concat(pipe_args)

		console.log('args for mplayer:', args);
		let omxProcess = spawn('/usr/bin/stdbuf', args, {detached: true});

		omxplayer["pid"] = omxProcess["pid"]

		open = true;
		omxplayer["open"] = open;
		emitPlaying()
		//emit player open/playing

		omxProcess.stdin.setEncoding('utf-8');
		omxProcess.on('close', updateStatus);


		omxProcess.stdout.on('data', (data) => {

		});



		omxProcess.stderr.on('data', (data) => {

		});

		omxProcess.on('error', () => {
			emitError('Problem running mplayer, is it installed?.');
		});

		omxplayer["process"] = omxProcess

		return omxProcess;

	}

	// Simulates keypress to provide control.
	var queryRunning = false;
  var stdQuery = new Array();

	function queryHandler() {
		if (stdQuery.length == 0) {
			queryRunning = false;
			return true;
		}
		queryRunning = true;
		var value = stdQuery.shift();
		player.stdin.write(value);
		setTimeout(function () {
			 queryHandler()
		 }, 20);
	}

	function writeStdin (value) {

		if (open) {
			stdQuery.push(value);
			if (queryRunning == false ) {
				queryHandler();
			}
		} else {
			throw new Error('Player is closed.');
		}

	}

	// ----- Setup ----- //

	if (source) {
		player = spawnPlayer(source, volume);
	}

	// ----- Methods ----- //

	// Restarts omxplayer with a new source.
	omxplayer.newSource = (src, volume) => {

		if (open) {

			player.on('close', () => {
				omxProcess["pid"] = false
				player = spawnPlayer(src, volume);
			});
			player.removeListener('close', updateStatus);
			writeStdin('q');

		} else {

			player = spawnPlayer(src, volume);

		}

	};

	omxplayer.play = () => { writeStdin('p'); };
	omxplayer.pause = () => { writeStdin('p'); };
	omxplayer.volUp = () => { writeStdin('*'); };
	omxplayer.volDown = () => { writeStdin('/'); };
	omxplayer.fastFwd = () => { writeStdin('>'); };
	omxplayer.rewind = () => { writeStdin('<'); };
	omxplayer.fwd30 =() => { writeStdin('\u001b[C'); };
	omxplayer.back30 = () => { writeStdin('\u001b[D'); };
	omxplayer.fwd600 = () => { writeStdin('\u001b[A'); };
	omxplayer.back600 = () => { writeStdin('\u001b[B'); };
	omxplayer.quit = () => { writeStdin('q'); };
	omxplayer.subtitles = () => { writeStdin('s'); };
	omxplayer.info = () => { writeStdin('z'); };
	omxplayer.incSpeed = () => { writeStdin('1'); };
	omxplayer.decSpeed = () => { writeStdin('2'); };
	omxplayer.prevChapter = () => { writeStdin('i'); };
	omxplayer.nextChapter = () => { writeStdin('o'); };
	omxplayer.prevAudio = () => { writeStdin('j'); };
	omxplayer.nextAudio = () => { writeStdin('k'); };
	omxplayer.prevSubtitle = () => { writeStdin('n'); };
	omxplayer.nextSubtitle = () => { writeStdin('m'); };
	omxplayer.decSubDelay = () => { writeStdin('d'); };
	omxplayer.incSubDelay = () => { writeStdin('f'); };

	Object.defineProperty(omxplayer, 'running', {
		get: () => { return open; }
	});

	// ----- Return Object ----- //

	emitPlaying();
	return omxplayer;

}


// ----- Module Exports ----- //

module.exports = Omx;
